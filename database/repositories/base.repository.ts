import { DeepPartial, DeleteResult, EntityManager, FindManyOptions, FindOneOptions, FindOptionsOrder, FindOptionsWhere, Repository, UpdateResult } from 'typeorm';
import { v4 as uuidV4 } from 'uuid';

export const defaultScope: FindOneOptions = { withDeleted: false };

export interface IFindOneOptions<TEntity> {
  select?: (keyof TEntity)[];
  relations?: string[];
}

export interface IFindAllOptions<TEntity> extends IFindOneOptions<TEntity> {
  skip?: number;
  take?: number;
  order?: FindOptionsOrder<TEntity>;
  where?: FindOptionsWhere<TEntity>[] | FindOptionsWhere<TEntity>;
}

/* This is a base repository where you need to add the methods which are common in all the repositories */

export abstract class BaseRepository<TEntity> {
  private readonly _repository: Repository<TEntity> = null;
  protected constructor(childRepository: Repository<TEntity>) {
    this._repository = childRepository;
  }

  async getById(id: string, findOptions: IFindOneOptions<TEntity> = {}): Promise<TEntity> {
    const { select = [], relations = [] } = findOptions;
    const options: FindOneOptions = {
      where: { id },
      ...(select.length && { select }),
      ...(relations.length && { relations }),
      ...defaultScope,
    };
    return this._repository.findOne(options);
  }

  async getOne(findOneOptions: FindOneOptions<TEntity>): Promise<TEntity> {
    return this._repository.findOne(findOneOptions);
  }

  async getAll(findOptions: IFindAllOptions<TEntity> = {}): Promise<TEntity[]> {
    const { select = [], relations = [], skip = null, take = null, where, order = null } = findOptions;
    const options: FindManyOptions = {
      ...(select.length && { select }),
      ...(relations.length && { relations }),
      ...(skip && { skip }),
      ...(take && { take }),
      ...(order && { order }),
      ...(where && { where }),
      ...defaultScope,
    };
    return this._repository.find(options);
  }

  async save(entity: DeepPartial<TEntity>, transactionManager?: EntityManager): Promise<TEntity> {
    const entityWithAutoGenerated = { ...entity, ...this.fillAutoGenerated() };
    if (transactionManager) return transactionManager.save(this._repository.target, entityWithAutoGenerated);
    return this._repository.save(entityWithAutoGenerated);
  }

  async delete(id: string | string[]): Promise<DeleteResult> {
    return this._repository.delete(id);
  }

  async update(id: string | string[] | number | number[] | Date | Date[] | FindOptionsWhere<TEntity>, data: DeepPartial<TEntity>, transactionManager?: EntityManager): Promise<UpdateResult> {
    if (transactionManager) return transactionManager.update(this._repository.target, id, data as any);
    return this._repository.update(id, data as any);
  }

  async query(query: string, parameters?: any[]): Promise<any> {
    return this._repository.query(query, parameters);
  }

  async getCount(findOptions: FindOptionsWhere<TEntity> = {}): Promise<number> {
    return this._repository.countBy(findOptions);
  }

  async getAndCount(options?: FindManyOptions<TEntity>): Promise<[TEntity[], number]> {
    return this._repository.findAndCount(options);
  }

  private fillAutoGenerated() {
    return {
      id: uuidV4(),
      createdAt: new Date(),
      updatedAt: new Date(),
    };
  }
}
